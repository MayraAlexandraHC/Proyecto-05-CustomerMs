/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bank.demo.api;

import com.bank.demo.model.Cliente;
import com.bank.demo.model.ErrorResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-06T09:24:38.890396800-05:00[America/Lima]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "clientes", description = "the clientes API")
public interface ClientesApi {

    default ClientesApiDelegate getDelegate() {
        return new ClientesApiDelegate() {};
    }

    /**
     * PUT /clientes/{id} : Actualizar información de un cliente
     *
     * @param id  (required)
     * @param cliente  (required)
     * @return Cliente actualizado exitosamente (status code 200)
     *         or Error de validación (status code 400)
     */
    @Operation(
        operationId = "actualizarCliente",
        summary = "Actualizar información de un cliente",
        responses = {
            @ApiResponse(responseCode = "200", description = "Cliente actualizado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Cliente.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error de validación", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clientes/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Cliente> actualizarCliente(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Cliente", description = "", required = true) @Valid @RequestBody Cliente cliente
    ) {
        return getDelegate().actualizarCliente(id, cliente);
    }


    /**
     * POST /clientes : Crear un nuevo cliente
     *
     * @param cliente  (required)
     * @return Cliente creado exitosamente (status code 201)
     *         or Error de validación (status code 400)
     */
    @Operation(
        operationId = "crearCliente",
        summary = "Crear un nuevo cliente",
        responses = {
            @ApiResponse(responseCode = "201", description = "Cliente creado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Cliente.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error de validación", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clientes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Cliente> crearCliente(
        @Parameter(name = "Cliente", description = "", required = true) @Valid @RequestBody Cliente cliente
    ) {
        return getDelegate().crearCliente(cliente);
    }


    /**
     * DELETE /clientes/{id} : Eliminar un cliente
     *
     * @param id  (required)
     * @return Cliente eliminado exitosamente (status code 204)
     *         or Error al eliminar cliente (status code 400)
     */
    @Operation(
        operationId = "eliminarCliente",
        summary = "Eliminar un cliente",
        responses = {
            @ApiResponse(responseCode = "204", description = "Cliente eliminado exitosamente"),
            @ApiResponse(responseCode = "400", description = "Error al eliminar cliente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clientes/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> eliminarCliente(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return getDelegate().eliminarCliente(id);
    }


    /**
     * GET /clientes : Listar todos los clientes
     *
     * @return Lista de clientes (status code 200)
     */
    @Operation(
        operationId = "listarClientes",
        summary = "Listar todos los clientes",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de clientes", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cliente.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clientes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Cliente>> listarClientes(
        
    ) {
        return getDelegate().listarClientes();
    }


    /**
     * GET /clientes/{id} : Obtener detalles de un cliente por ID
     *
     * @param id  (required)
     * @return Detalles del cliente (status code 200)
     *         or Cliente no encontrado (status code 404)
     */
    @Operation(
        operationId = "obtenerCliente",
        summary = "Obtener detalles de un cliente por ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalles del cliente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Cliente.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cliente no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clientes/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Cliente> obtenerCliente(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return getDelegate().obtenerCliente(id);
    }

}
